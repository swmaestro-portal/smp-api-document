# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: SW Maestro Portal API
  description: SW Maestro Portal API Document
  version: "1.0.0"
# the domain of the service
host: api.swmaestro.net
# array of all schemes that your API supports
schemes:
  - http
# will be prefixed to all paths
basePath: /
consumes:
- application/json
produces:
- application/json
parameters:
  UserBody:
    name: user
    in: body
    schema:
      $ref: '#/definitions/User'
  LectureBody:
    name: lecture
    in: body
    schema:
      $ref: '#/definitions/Lecture'
  AssignmentBody:
    name: assignment
    in: body
    schema:
      $ref: '#/definitions/Assignment'
  CommentBody:
    name: comment
    in: body
    schema:
      $ref: '#/definitions/Comment'
  UserEmailQuery:
    name: user_email
    in: query
    description: User's email to filter
    type: string
  UserEmailFormData:
    name: user_email
    in: formData
    description: User's eamil
    type: string
  UserNameFormData:
    name: user_name
    in: formData
    description: User's name
    type: string
  UserPasswordFormData:
    name: user_password
    in: formData
    description: User's password
    type: string
responses:
  BasicSucceed:
    description: Succeed.
  BasicBadRequest:
    description: Bad request.
  BasicConflict:
    description: Conflict.
paths:
  ### Users ###
  /users:
    post:
      description: Creates a new user (Sign Up).
      summary: Create User
      operationId: postUser
      parameters:
      - $ref: '#/parameters/UserBody'
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
    get:
      description: Returns list of users.
      summary: Users List
      operationId: getUsers
      parameters:
      - $ref: '#/parameters/UserEmailQuery'
      responses:
        '200':
          description: Users List
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      security:
      - smp_auth:
        - manager
  /users/me:
    get:
      description: Returns logined user's profile.
      summary: My Profile
      operationId: getMe
      responses:
        '200':
          description: User Response
          schema:
            $ref: '#/definitions/User'
      security:
      - smp_auth: []
    put:
      description: Edit my profile.
      summary: Edit Me
      operationId: putMe
      parameters:
      - $ref: '#/parameters/UserNameFormData'
      - $ref: '#/parameters/UserPasswordFormData'
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth: []
    delete:
      description: Deletes Me (Leave).
      summary: Delete Me
      operationId: deleteMe
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth: []
  /users/{user-id}:
    get:
      description: Returns user's profile.
      summary: User Profile
      operationId: getUser
      responses:
        '200':
          description: User Profile
          schema:
            $ref: '#/definitions/User'
      security:
      - smp_auth: []
    put:
      description: Edit user's profile.
      summary: Edit User
      operationId: putUser
      parameters:
      - $ref: '#/parameters/UserNameFormData'
      - $ref: '#/parameters/UserPasswordFormData'
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth:
        - manager
    delete:
      description: Deletes a User.
      summary: Delete User
      operationId: deleteUser
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth:
        - manager
    parameters:
    - name: user-id
      in: path
      description: User's ID
      required: true
      type: integer
      
  ### Lectures ###
  /lectures:
    post:
      description: Creates a lecture.
      summary: Create lecture
      operationId: postLecture
      parameters:
      - $ref: '#/parameters/LectureBody'
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth:
        - mentor
        - manager
  
    get:
      description: Return lectures list.
      summary: Lecture List
      operationId: getLectures
      # parameters:
      responses:
        '200':
          description: Lectures List
          schema:
            type: array
            items:
              $ref: '#/definitions/Lecture'
      security:
      - smp_auth: []
  /lectures/{lecture-id}:
    get:
      description: Returns a Lecture.
      summary: Get Lecture
      operationId: getLecture
      # parameters:
      responses:
        '200':
          description: Lecture Information
          schema:
            $ref: '#/definitions/Lecture'
      security:
      - smp_auth: []
    put:
      description: Edit a Lecture
      summary: Edit Lecture
      operationId: putLecture
      parameters:
      - $ref: '#/parameters/LectureBody'
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth:
        - mentor
        - manager
    delete:
      description: Delete a Lecture
      summary: Delete Lecture
      operationId: deleteLecture
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth:
        - mentor
        - manager
    parameters:
    - name: lecture-id
      in: path
      description: Lecture's ID
      required: true
      type: integer
  /lectures/{lecture-id}/comments:
    post:
      description: Creates a comment on lecture.
      summary: Create Comment on Lecture
      operationId: postCommentOfLecture
      parameters:
      - $ref: '#/parameters/CommentBody'
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth: []
    get:
      description: Return comments list of lecture.
      summary: List Comments of Lecture
      operationId: getCommentsOfLecture
      # parameters:
      responses:
        '200':
          description: Lectures List
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
      security:
      - smp_auth: []
    parameters:
    - name: lecture-id
      in: path
      description: Lecture's ID
      required: true
      type: integer
  # /lectures/{lecture-id}/comments/{comment-id}:
  #   $ref: '#/paths/%2Fcomments%2F%7Bcomment-id%7D'
    # $ref: '#/paths/%2Fcomments%2F{comment-id}'
  /lectures/{lecture-id}/attachments:
    post:
      description: Uploads a attachment on lecture.
      summary: Upload attachment on Lecture
      operationId: postAttachmentOfLecture
      # parameters:
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth: []
    get:
      description: Return attachments list of lecture.
      summary: List Attachments of Lecture
      operationId: getAttachmentsOfLecture
      # parameters:
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth: []
    parameters:
    - name: lecture-id
      in: path
      description: Lecture's ID
      required: true
      type: integer
  # /lectures/{lecture-id}/attachments/{attachment-id}:
  #   $ref: '#/paths/'
  
  ### Assignments ###
  /assignments:
    post:
      description: Creates a assignment.
      summary: Create assignment
      operationId: postAssignment
      parameters:
      - $ref: '#/parameters/AssignmentBody'
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth:
        - mentor
        - manager
  
    get:
      description: Return assignments list.
      summary: Assignment List
      operationId: getAssignments
      # parameters:
      responses:
        '200':
          description: Assignments List
          schema:
            type: array
            items:
              $ref: '#/definitions/Assignment'
      security:
      - smp_auth: []
  /assignments/{assignment-id}:
    get:
      description: Returns a Assignment.
      summary: Get Assignment
      operationId: getAssignment
      # parameters:
      responses:
        '200':
          description: Assignment Information
          schema:
            $ref: '#/definitions/Assignment'
      security:
      - smp_auth: []
    put:
      description: Edit a Assignment
      summary: Edit Assignment
      operationId: putAssignment
      parameters:
      - $ref: '#/parameters/AssignmentBody'
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth:
        - mentor
        - manager
    delete:
      description: Delete a Assignment
      summary: Delete Assignment
      operationId: deleteAssignment
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth:
        - mentor
        - manager
    parameters:
    - name: assignment-id
      in: path
      description: Assignment's ID
      required: true
      type: integer
  /assignments/{assignment-id}/comments:
    post:
      description: Creates a comment on assignment.
      summary: Create Comment on Assignment
      operationId: postCommentOfAssignment
      parameters:
      - $ref: '#/parameters/CommentBody'
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth: []
    get:
      description: Return comments list of assignment.
      summary: List Comments of assignment
      operationId: getCommentsOfAssignment
      # parameters:
      responses:
        '200':
          description: Assignments List
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
      security:
      - smp_auth: []
    parameters:
    - name: assignment-id
      in: path
      description: Assignment's ID
      required: true
      type: integer
  # /lectures/{lecture-id}/comments/{comment-id}:
  #   $ref: '#/paths/%2Fcomments%2F%7Bcomment-id%7D'
    # $ref: '#/paths/%2Fcomments%2F{comment-id}'
  /assignments/{assignment-id}/attachments:
    post:
      description: Uploads a attachment on assignment.
      summary: Upload attachment on Assignment
      operationId: postAttachmentOfAssignment
      # parameters:
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth: []
    get:
      description: Return attachments list of assignment.
      summary: List Attachments of Assignment
      operationId: getAttachmentsOfAssignment
      # parameters:
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth: []
    parameters:
    - name: assignment-id
      in: path
      description: Assignment's ID
      required: true
      type: integer
  
  ### Comments ###
  /comments/{comment-id}:
    put:
      description: Edit a comment.
      summary: Edit Comment
      operationId: putComment
      parameters:
      - $ref: '#/parameters/CommentBody'
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth: []
    delete:
      description: Delete a comment.
      summary: Delete Comment
      operationId: deleteComment
      # parameters:
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth: []
    parameters:
    - name: comment-id
      in: path
      description: Comment's ID
      required: true
      type: integer
      
  ### Notifications ###    
  /notifications/me:    
    get:
      description: Return my notifications
      summary: My notification list
      operationId: getMyNotifications
      # parameters:
      responses:
        '200':
          description: Notifications List
          schema:
            type: array
            items:
              $ref: '#/definitions/Notification'
      security:
      - smp_auth: []      
  
  /notifications/{notification-id}:    
    put:
      description: Read notification
      summary: Read notification
      operationId: readNotification
      # parameters:
      responses:
        '200':
          $ref: '#/responses/BasicSucceed'
      security:
      - smp_auth: []   
    parameters:
    - name: notification-id
      in: path
      description: Notification's ID
      required: true
      type: integer
  
definitions:
  User:
    type: object
    required:
    - user_email
    - user_name
    properties:
      user_id:
        type: integer
        description: User's unique ID.
      user_email:
        type: string
        description: User's email address.
      user_name:
        type: string
        description: User's name.
  Lecture:
    type: object
    required:
    - articleGenerationId
    - articleSubject
    - articleContent
    - lectureTeacherId
    - lectureBeginAt
    - lectureEndAt
    properties:
      articleId:
        type: integer
        description: Article's unique ID
      articleWriterId:
        type: integer
        description: Article Writer user ID
      articleModifierId:
        type: integer
        description: Article Modifier's user ID
      articleGenerationId:
        type: integer
        description: Article's generation ID
      articleSubject:
        type: string
        description: Article's subject
      articleContent:
        type: string
        description: Article's content
      articleCreatedAt:
        type: string
        description: When is article created 
      articleUpdatedAt:
        type: string
        description: When is article updated
      articleType:
        type: string
        description: Article's Type
      articleStatus:
        type: string
        description: Article's Status
      lectureTeacherId:
        type: integer
        description: Lecture's teacher id
      lectureBeginAt:
        type: string
        description: When lecture begin
      lectureEndAt:
        type: string
        description: When lecture end
  Assignment:
    type: object
    required:
    - articleGenerationId
    - articleSubject
    - articleContent
    - assignmentEndAt
    properties:
      articleId:
        type: integer
        description: Article's unique ID
      articleWriterId:
        type: integer
        description: Article Writer user ID
      articleModifierId:
        type: integer
        description: Article Modifier's user ID
      articleGenerationId:
        type: integer
        description: Article's generation ID
      articleSubject:
        type: string
        description: Article's subject
      articleContent:
        type: string
        description: Article's content
      articleCreatedAt:
        type: string
        description: When is article created 
      articleUpdatedAt:
        type: string
        description: When is article updated
      articleType:
        type: string
        description: Article's Type
      articleStatus:
        type: string
        description: Article's Status
      assignmentEndAt:
        type: string
        description: When assignment end
  Comment:
    type: object
    required:
    - commentContent
    - commentParentId
    properties:
      commentId:
        type: integer
        description: Comment's uniqud ID
      commentContent:
        type: string
        description: Comment's content
      commentWriterId:
        type: integer
        description: Comment writer's ID
      commentParentId:
        type: integer
        description: Comment parent's ID
      commentCreatedAt:
        type: string
        description: When is comment created 
      commentUpdatedAt:
        type: string
        description: When is comment created 
      commentStatus:
        type: string
        description: A available D deleted
  Notification:
    type: object
    properties:
      notificationId:
        type: integer
        description: Notification's uniqud ID
      notificationMessage:
        type: string
        description: Notification's content
      notificationUrl:
        type: string
        description: Where is notification sent
      notificationTargetUserId:
        type: integer
        description: Notification's target user Id
      notificationCreatedAt:
        type: string
        description: When is comment created 
      notificationIsRead:
        type: boolean
        description: is notification Read
    
      
      
  # Product:
  #   type: object
  #   properties:
  #     product_id:
  #       type: string
  #       description: Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
  #     description:
  #       type: string
  #       description: Description of product.
  #     display_name:
  #       type: string
  #       description: Display name of product.
  #     capacity:
  #       type: string
  #       description: Capacity of product. For example, 4 people.
  #     image:
  #       type: string
  #       description: Image URL representing the product.
  # PriceEstimate:
  #   type: object
  #   properties:
  #     product_id:
  #       type: string
  #       description: Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles
  #     currency_code:
  #       type: string
  #       description: "[ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code."
  #     display_name:
  #       type: string
  #       description: Display name of product.
  #     estimate:
  #       type: string
  #       description: formDataatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or "Metered" for TAXI.
  #     low_estimate:
  #       type: number
  #       description: Lower bound of the estimated price.
  #     high_estimate:
  #       type: number
  #       description: Upper bound of the estimated price.
  #     surge_multiplier:
  #       type: number
  #       description: Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.
  # Profile:
  #   type: object
  #   properties:
  #     first_name:
  #       type: string
  #       description: First name of the Uber user.
  #     last_name:
  #       type: string
  #       description: Last name of the Uber user.
  #     email:
  #       type: string
  #       description: Email address of the Uber user
  #     picture:
  #       type: string
  #       description: Image URL of the Uber user.
  #     promo_code:
  #       type: string
  #       description: Promo code of the Uber user.
  # Activity:
  #   type: object
  #   properties:
  #     uuid:
  #       type: string
  #       description: Unique identifier for the activity
  # Activities:
  #   type: object
  #   properties:
  #     offset:
  #       type: integer
  #       formDataat: int32
  #       description: Position in pagination.
  #     limit:
  #       type: integer
  #       formDataat: int32
  #       description: Number of items to retrieve (100 max).
  #     count:
  #       type: integer
  #       formDataat: int32
  #       description: Total number of items available.
  #     history:
  #       type: array
  #       items:
  #         $ref: '#/definitions/Activity'
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
securityDefinitions:
  smp_auth:
    description: Own Auth. (* Need one of scopes as listed on request.)
    type: oauth2
    tokenUrl: http://api.swmaestro.net/oauth/token
    flow: password
    scopes:
      mentee: Mentee
      mentor: Mentor
      manager: Manager
